---
import Base from '../layouts/base.astro';
import {Image} from 'astro:assets';

// const folderPath = path.join(process.cwd(), 'src', 'pages', 'blogs');

//@ts-nocheck
const posts = Object.values(import.meta.glob('./blogs/*.md', { eager: true }));

const images = Object.values(import.meta.glob('../assets/blog-images/*.png', {eager:true}))
    .map(module => module.default); 
console.log(images)

const postimageKey = {}

for (let i = 0; i < posts.length; i++) {
    const post = posts[i];
    console.log(`The current Post is: ${post.frontmatter.title}`);
    let imagePath : string = post.frontmatter.image;
    if (!imagePath) {console.log("NO IMAGE FOUND. CONTINUING TO THE NEXT BLOG...\n\n"); continue;}

    console.log(imagePath + " is the path in post frontmatter");
    let imageFilename = imagePath.split("/").pop().replace(".png","");
    console.log(imageFilename + " with full name");
 
    console.log("Beginning the search for the correct image. \n");
    for (let j = 0; j < images.length; j++) {
        console.log(imageFilename + " is filename");
        console.log(images[j].src + " is the current image");

        const re = RegExp(`${imageFilename}.[a-zA-Z0-9_-]+\.png`);
        console.log(re.test(images[j].src));
        // if (images[j].src.includes(imageFilename)) {
        if (re.test(images[j].src)) {
            console.log(`includes ${imageFilename} in images src. \nCorrect image!`);
            postimageKey[post.frontmatter.title] = images[j];
            break;
        } else {
            console.log("not the correct image. Going to the next one...\n");
        }
    }

    console.log("\n-----------------------\n")

}

posts.forEach((post) => {
    console.log(postimageKey[post.frontmatter.title]);

})

const descLength = 97;

// sort by date
posts.sort((a, b) => {
    const dateA = new Date(a.frontmatter.specificDate);
    const dateB = new Date(b.frontmatter.specificDate);
    return dateB.getTime() - dateA.getTime();
})

// posts.forEach((post) => {
//     console.log(post);
//     console.log(post.getHeadings());
// })



/* Object post {
    file (returns the exact path)
    url (returns local path (/blogs/example))
    frontmatter {
        the things that you set in the blog's frontmatter
    }

    // nice organized. slug is link-friendly
    getHeadings() = {

    [
      { depth: 1, slug: 'hi', text: 'HI!' },
      {
        depth: 3,
        slug: 'today-we-did-a-robot-it-was-cool',
        text: 'Today we did a robot. It was cool.'
      }
    ]
  
    }


    // literally the raw content
    rawContent() = {

    # HI!

    ### Today we did a robot. It was *cool*.

    }
}

*/
---

<Base
    index="true"
    title="Blog"
    desc="Our blog page—what we're doing!"
>
    <Fragment slot="head">
        <link rel="canonical" href="https://www.bitflip.club/blogs">

        <style>
            img {
                object-fit: contain;
                overflow: hidden;
                box-sizing:content-box;
                width: auto;
                min-width:content;

                max-height:50vh;
                max-width: 100%;
                height: fit-content;
                flex-basis: content;
                border-radius: 10px;
                border:2px solid white;
            }
            #blogs {
                display:flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                width: 100%;
                padding:0 5%;
                gap:50px;
            }
            .blog {
                background-color: var(--card-color);
                border-radius: 10px;
                min-width: 100%;
                border:2px solid white;
                padding:20px;
                cursor: pointer;
                pointer-events: none;
                /* box-shadow: 10px black inset; */
                box-sizing: border-box;
            }
            .blog-link {
                all:unset;
                cursor:pointer;
                min-width: 60%;
                max-width: 60%;
        
                flex:1;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: transform 0.2s ease;

            }
            .blog-link:hover {
                transform:scale(110%);
            }
            .blog-title {
                all:unset;
                color:white;
                font-size: 1.5rem;
            }
            .blog-date {
                color:lightgray;
                text-align: center;
                font-size: 1.1rem;
                margin-bottom: 10px;
            }
            .blog-desc {
                padding:0 25px;
                font-size:1.1rem;
                color:white;
                text-align: center;
            }

            @media only screen and (orientation:portrait) {
                .blog-desc {
                    padding:0;
                }

                .blog-link{
                    min-width: 90%;
                    max-width: 90%;
                }
            }
        </style>
    </Fragment>

    <header>
        <div class="header-content">
            <h1>Blogs</h1>
        </div>
    </header>

    <section class="section-alt">
        <div id="blogs">
            {
            posts.map((post) => {
                return (
                <a href={post.url} class="blog-link">
                    <div class="blog">
                        {(post.frontmatter.image && postimageKey[post.frontmatter.title]) ? (<Image src={postimageKey[post.frontmatter.title]} alt={(post.frontmatter.imageAlt) ? post.frontmatter.imageAlt : ""} />) : null}
                        <div class="blog-text">
                            
                            <h3 class="blog-title">{post.frontmatter.title}</h3>
                            <p class="blog-date">{post.frontmatter.author}<span class="landscape-only"> • </span><br class="portrait-only"/>{post.frontmatter.date}</p>
                            <p class="blog-desc">{post.frontmatter.desc/*(post.frontmatter.desc.length > descLength ? post.frontmatter.desc.substring(0, descLength) + "..." : post.frontmatter.desc)*/}</p>
                        </div>
                    </div>
                </a>
                )
            })}
        </div>
    </section>
</Base>